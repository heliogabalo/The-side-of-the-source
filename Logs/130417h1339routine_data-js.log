// Vordefiniert: VoIP Providerdaten
//var voipprovtxt1 = new Array("DSL Telephone number","Internet call number");
//var voipprovtxt2 = new Array("E-Mail-Adresse","User name");
//var voipprovtxt3 = new Array("Password (Web password)","Password");
//var voipprovtxt4 = new Array("","Registrar");
//var voipprovovnr = new Array(true,true);
//var voipprovdtmf = new Array(false,true);

// Telephone number of ISDN call numbers
var anz_msn = 10;

// Telephone number of Anschlse
var anz_as = 2;

// Telephone number of abbreviated dialing
var anz_kuwa = 0;

function isBlank(s)
{
	for(i=0;i<s.length;i++)
	{
		c=s.charAt(i);
		if((c!=' ')&&(c!='\n')&&(c!='\t'))return false;
	}
	return true;
}

function isValidIPv6(s)
{
	return s.match(/:/g)&&s.match(/:/g).length<=7&&/::/.test(s)?/^([\da-f]{1,4}(:|::)){1,6}[\da-f]{1,4}$/i.test(s):/^([\da-f]{1,4}:){7}[\da-f]{1,4}$/i.test(s);
}
function getQueryValue( name ){
    var v=null;
	var query = location.search;
	if(name.charAt(0) == "#"){ //#<id> format
		query=location.href;
		if(query.indexOf(name) != -1){
			return 1; // find it
		}
		return 0; //no found
	}
	if (query=="") return "";
	if(query.charAt(0) == "?"){
		query = query.substring(1); //query.substr( 1, query.length ) ; // ignore the first char: '?'
	}
	var arr = query.split( /[\&]/ );
	name = name+"=";
	var index;
	for( var x = 0 ; x < arr.length ; x++ ){
		index = arr[x].indexOf(name);
		if( index != 0 )  continue ; // must match at the first character
		return arr[x].substr( name.length, arr[x].length );
	}
	return v;
}
function getIntQueryValue( _name, _def ){
	var r;
	var q = getQueryValue( _name );
	if( q=='' )  r = _def;
	else r = parseInt('0'+q,10);
	return r;
}
function isHasSpace(s) {
	for (i = 0 ; i < s.length ; i++) {
		c = s.charAt(i);
		if((c == ' ') || (c == '\t')) return true;
	}
	return false;
}

function isBlank_allow_space(s)
{
	for(i=0;i<s.length;i++)
	{
		c=s.charAt(i);
		if((c!='\n')&&(c!='\t'))return false;
	}
	return true;
}

function isBlank_empty(s)
{
	for(i=0;i<s.length;i++)
	{
		c=s.charAt(i);
		if((c!='\n')&&(c!='\t'))return false;
	}
	return true;
}

function isEmpty(s)
{
	c=s.length;
    if((c==''))return true;
}

function isBlank_Zero(s)
{
	for(i=0;i<s.length;i++){
		c=s.charAt(i);
		if((c!=' ')&&(c!='\n')&&(c!='\t')&&(c!='0'))return false;
	}
	return true;
}

function isNValidInt(s)
{
	var i, c;
	for (i=0; i<s.length; i++)	{
		c = s.charCodeAt(i);
		if ((c < 48) || (c > 57))
			return true;
	}
	return false;
}

function isNegInt(s)
{
	if (s<0)
		return true;
	else
		return false;
}

function isNValidIP(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<0||s>255))
		return true;
	else
		return false;
}

function isNValidLastIP(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<1||s>254))
		return true;
	else
		return false;
}

function isNValidPort(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<1||s>65535))
		return true;
	else
		return false;
}

function isNValidPortAllowZero(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<0||s>65535))
		return true;
	else
		return false;
}

function is2Hex(s) {
	var j,x = 0;
	for(var i = 0; i < s.length; i++) {
		var c = s.charAt(i);
		j = parseInt(c,16);
		if (j>=0 && j<=15) {
			if(x==1)	return false;
			x=1;
		}
	}
	return true;
}

function isHex(s) {
	var j, x = 0;
	for (var i = 0 ; i < s.length; i++) {
		var c = s.charAt(i);
		j = parseInt(c, 16);
		if (!(j>=0 && j<=15)) {
			x = 1;
		}
		if (x == 1) return false;
	}
	return true;
}

function isNValid(s) {
	if( isBlank(s) || is2Hex(s))
		return true;
	else
		return false;
}

function isNValids(s) {
	if( isBlank(s) || isHex(s))
		return true;
	else
		return false;
}

function MM_openBrWindow(theURL,winName,features){
  	var w = window.open(theURL,winName,features);
	if( w==null )
//		alert('Can not open new window!');
		alert(errOpenNewWindow);
	else
		w.focus(); // bring windows to front
}

function getElementsByFieldName(target_form, field)
{
	var i;
	var form;
	var value;
	if(target_form == null || field == null) return -1;
	for(i=0; i<target_form.length; i++)
	{
		if(target_form.elements[i].name == field)
			return i;
	}
	return -1;
}

function isNValidNum(s) {
	if((isBlank(s)) || (isNaN(s))||(isNValidInt(s))||(isNegInt(s)))
		return true;
	else
		return false;
}

function isNValidNum_ZERO(s) {
	if((isNaN(s))||(isNValidInt(s))||(isNegInt(s)))
		return true;
	else
		return false;
}

function isNValidHR(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<=0||s>=24))
		return true;
	else
		return false;
}

function isNValidMIN(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<=0||s>=60))
		return true;
	else
		return false;
}

function isNValidUnicastIP(s) {
	if((isBlank(s))||(isNaN(s))||(isNValidInt(s))||(isNegInt(s))||(s<=0||s>=224))
		return true;
	else
		return false;
}

function isSpecialChar(s, name) {
	var src = new String(s);
	var lst = new String("\\\"\'\/");
	var i, n;

	n = lst.length;
	for (i=0; i<n; i++) {
		var c = lst.charAt(i);
		var tmpS = new String(c);
		if (src.indexOf(tmpS) != -1) {
			alert(errSpecialChar2 + ' \\ \" \/ ' + errSpecialChar5 + ' \'' + errSpecialChar3 + name + errSpecialChar4);
			return true;
		}
	}

	return false;
}

function isSpecialChar2(s, name) {
	var src = new String(s);
	var lst = new String("\\\"\'");
	var i, n;

	n = lst.length;
	for (i=0; i<n; i++) {
		var c = lst.charAt(i);
		var tmpS = new String(c);
		if (src.indexOf(tmpS) != -1) {
			alert(errSpecialChar2 + ' \\ \" ' + errSpecialChar5 + ' \'' + errSpecialChar3 + name + errSpecialChar4);
			return true;
		}
	}

	return false;
}

function isSpecialChar3(s, name) {
	var src = new String(s);
	var lst = new String("\"\'");
	var i, n;

	n = lst.length;
	for (i=0; i<n; i++) {
		var c = lst.charAt(i);
		var tmpS = new String(c);
		if (src.indexOf(tmpS) != -1) {
			alert(errSpecialChar2 + ' \" ' + errSpecialChar5 + ' \'' + errSpecialChar3 + name + errSpecialChar4);
			return true;
		}
	}

	return false;
}

function isSpecialChar0(s, name) {
	var src = new String(s);
	var lst = new String("\\\"\'\/<>");
	var i, n;

	n = lst.length;
	for (i=0; i<n; i++) {
		var c = lst.charAt(i);
		var tmpS = new String(c);
		if (src.indexOf(tmpS) != -1) {
			alert(errSpecialChar2 + ' \\ \" \/ < > ' + errSpecialChar5 + ' \'' + errSpecialChar3 + name + errSpecialChar4);
			return true;
		}
	}

	return false;
}

function isSpecialChar5(s, name)
{
	var src = new String(s);
	var lst = new String(" '/:*?\"<>|`=+\\[];,~!@#$%^&()");
	var i, n;

	n = lst.length;
	for (i=0; i<n; i++) {
		var c = lst.charAt(i);
		var tmpS = new String(c);
		if (src.indexOf(tmpS) != -1) {
			return true;
		}
	}

	return false;
}

//function isSpecialChar(s, name) {
//	var src = new String(s);
//	var lst = new String("\\\"\'");
//	var i, n;
//
//	n = lst.length;
//	for (i=0; i<n; i++) {
//		var c = lst.charAt(i);
//		var tmpS = new String(c);
//		if (src.indexOf(tmpS) != -1) {
//			alert(name + ": \\ , \" and \' are invalid.");
//			return true;
//		}
//	}
//
//	return false;
//}

////////// CHECK FORMAT

function checkIPAddr(dstText)
{
	data = dstText.match(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/);
	if (!data || !dstText) return false;
	return true;
}

function chkisValidIP (addr)
{
    var sub_addr;
    var net_id;
    var host_id;

    if (addr.search(/^\d{1,3}\.\d{1,3}\.\d{1,3}\./) == -1)
        return false;
    sub_addr = addr.split(/\./);
    if(sub_addr.length < 4) return false;
    if(sub_addr[3] == "*")
    	sub_addr[3] = "1";
    else
    {
    	if(isNaN(sub_addr[3]) == true) return false;
    }

    if (sub_addr[0] > 0xff || sub_addr[1] > 0xff || sub_addr[2] > 0xff || sub_addr[3] > 0xff)
        return false;

    if(sub_addr[0] < 128) /* A class */
    {
        if(sub_addr[0] == 0 || sub_addr[0] == 127)
            return false;
        host_id = sub_addr[1] * 0x10000 + sub_addr[2] * 0x100 + sub_addr[3] * 0x1;
        if(host_id == 0 || host_id == 0xffffff)
            return false;
    }
    else if(sub_addr[0] < 192) /* B class */
    {
        host_id = sub_addr[2] * 0x100 + sub_addr[3] * 0x1;
        if(host_id == 0 || host_id == 0xffff)
            return false;
    }
    else if(sub_addr[0] < 224) /* C class */
    {
        host_id = sub_addr[3] * 0x1;
        if(host_id == 0 || host_id == 0xff)
            return false;
    }
    else  /* Limit broadcast, Multicast net */
    {
        return false;
    }

    return true;
}

function checkEMail(dstText)
{
	data = dstText.match(/^\S+@\S+\.\S+$/);
	if (!data || !dstText) return false;
	return true;
}

/// Check string format IP address with specific subnet
/// It will check if it is a valid IP string, then check with followings:
///  subnet IP, subnet ID and subnet broadcast IP, finally verify if it belongs
///  to this subnet.
/// If bBelongTo is false, the strIP should not belong to this subnet.

function checkIPwithSubnet(strIP, ulLan_ip, ulLan_mask, bBelongTo) {
	var ulLan_ID, ulIP, ulMaskedIP;
	var ulLan_Broadcast;

	if (!isValidIP(strIP)) return false;

	if (vlan_func_enable == 0) {
		ulLan_ID = ulLan_ip & ulLan_mask;
		if (ulLan_ID < 0) ulLan_ID += 0x100000000;
		ulLan_Broadcast = ulLan_ID + (0xffffffff ^ ulLan_mask);

		ulIP = IpToLong(strIP);
		ulMaskedIP = ulIP & ulLan_mask;
		if (ulMaskedIP < 0) ulMaskedIP += 0x100000000;

		if (bBelongTo == false) {
			if (ulLan_ID == ulMaskedIP)
				return false;

			return true;
		}
		if ( (ulLan_ID != ulMaskedIP) || (ulIP == ulLan_ID) || (ulIP == ulLan_ip) || (ulIP == ulLan_Broadcast))
			return false

		return true;
	} else {
		var i, ulLan_ip1, ulLan_mask1;

		for (i=0; i<4; i++) {
			ulLan_ip1 = ulLan_ip[i*4] * 0x1000000 + ulLan_ip[i*4 + 1] * 0x10000 + ulLan_ip[i*4 + 2] * 0x100 + ulLan_ip[i*4 + 3];
			if (ulLan_ip1 == 0) continue;

			ulLan_mask1 = ulLan_mask[i*4] * 0x1000000 + ulLan_mask[i*4 + 1] * 0x10000 + ulLan_mask[i*4 + 2] * 0x100 + ulLan_mask[i*4 + 3];

			ulLan_ID = ulLan_ip1 & ulLan_mask1;
			if (ulLan_ID < 0) ulLan_ID += 0x100000000;
			ulLan_Broadcast = ulLan_ID + (0xffffffff ^ ulLan_mask1);

			ulIP = IpToLong(strIP);
			ulMaskedIP = ulIP & ulLan_mask1;
			if (ulMaskedIP < 0) ulMaskedIP += 0x100000000;

			if (bBelongTo == false) {
				if (ulLan_ID == ulMaskedIP)
					return false;
			} else {
				if ( (ulLan_ID == ulMaskedIP) && (ulIP != ulLan_ID) && (ulIP != ulLan_ip1) && (ulIP != ulLan_Broadcast))
					return true;
			}
		}

		if (bBelongTo == false)
			return true;
		else
			return false;
	}
}

// data.js
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	firewall_a.stm;	firewall_d.stm;	firewall_mac.stm;	firewall_main.stm;	firewall_rule_a.stm;	firewall_spi_h.stm;	firewall_u.stm;
//	isp.stm;	atmint.stm;
//	lan_main.stm;	v_lan.stm;
//	nat_m.stm, nat_sp.stm;	nat_v.stm
//	route_tbl.stm;	r_rip.stm
//	setupw_main1.stm;	setupq6_main.stm
//	setup_dns.stm;
//	snmp_trap.stm;
//	system_c.stm;	system_i.stm;	system_p.stm;	system_remote_mgmt.stm;
//	wireless_1X.stm;	wireless_wep.stm;	wireless_wpa.stm;	wireless_wds.stm;
//	upnp_main.stm;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	atmpvc.stm;
//	nat_off.stm;
//	r_mort.stm;
//	wireless_mac.stm;
//	accessControlAdd.stm;

var tcp_proto = 6;
var udp_proto = 17;
var both_proto = 0;
var icmp_proto = 1;

// address mapping
var ADDRESS_MAP_NUMBER_PER_INTERFACE = 16;
var ADDRESS_MAP_TOTAL_COUNT = 16;

// virtual server
var VIRTUAL_SERVER_NUMBER_PER_INTERFACE = 20;
var VIRTUAL_SERVER_TOTAL_COUNT = 20;

function VIRTUAL_SERVER_ENTRY()
{
	var i;
	this.index = -1; // ignore
	this.enable = 0;
	this.protocol = 0; // ignore
	this.ip_count = 0;
	this.ip = new Array(IP_MAX);
	for(i=0; i < IP_MAX; i++)
		this.ip[i] = new IP_RANGE();

	this.lan_ip = "";

	this.port_count = 0;
	this.port = new Array(PORT_MAX);
	for(i=0; i < PORT_MAX; i++)
		this.port[i] = new PORT_RANGE();

	this.lan_port_count = 0;
	this.lan_port = new Array(PORT_MAX);
	for(i=0; i < PORT_MAX; i++)
		this.lan_port[i] = new PORT_RANGE();
};

function VIRTUAL_SERVER_TABLE()
{
	var i;
	this.interface_num = 0;
	this.count = 0; // ignore
	this.entry = new Array(VIRTUAL_SERVER_NUMBER_PER_INTERFACE);
	for(i=0; i<VIRTUAL_SERVER_NUMBER_PER_INTERFACE; i++)
		this.entry[i] = new VIRTUAL_SERVER_ENTRY();
}


// DMZ
var DMZ_NUMBER_PER_INTERFACE = 16;
var DMZ_TOTAL_COUNT = 16;

var PORT_MAX = 15, IP_MAX = 1;
var MAX_PPPOE_SESSION = 4;


// b_port, e_port
function PORT_RANGE()
{
	this.protocol = 0; // 0(both), tcp or udp
	this.b_port = 0;
	this.e_port = 0;
};

function IP_RANGE()
{
	this.ip = ""; // start ip
	this.count = 0;
};

function Interface_T()
{
	this.ip = new Array(4);
	this.mask = new Array(4);
	this.gateway = new Array(4);

	var i;
	for(i=0; i<4; i++)
	{
		this.ip[i] = 0;
		this.mask[i] = 0;
		this.gateway[i] = 0;
	}
};

function IsSameNetwork(int1, int2)
{
	var i;
	if(int1.ip == 0 || int2.ip == 0) return false;
	for(i=0;i<4;i++)
		if( (int1.ip[i] & int1.mask[i]) != (int2.ip[i] & int2.mask[i]) ) return false;

	return true;
}

// utility

// ex: strIP = "192.168.010.1"
function parseIP(strIP)
{
	var val1, val2, val3, val4;
	var IP = strIP.split(/\./);
	val1 = new Number(IP[0]);
	val2 = new Number(IP[1]);
	val3 = new Number(IP[2]);
	val4 = new Number(IP[3]);
	return (val1.valueOf() + '.' + val2.valueOf() + '.' + val3.valueOf() + '.' + val4.valueOf() )
}

function IpToLong(addr) {
	var	IP;
	var val1, val2, val3, val4, longIP;
	IP = addr.split(/\./);
	val1 = new Number(IP[0]);
	val2 = new Number(IP[1]);
	val3 = new Number(IP[2]);
	val4 = new Number(IP[3]);
    longIP = val1 * 0x1000000 + val2 * 0x10000 + val3 * 0x100 + val4;
	return longIP;
}

function isValidMASK (addr)
{
    var sub_addr;
	data = addr.match(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/);
	if (!data || !addr) return false;

    if (addr.search(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/) == -1)
        return false;
    sub_addr = addr.split(/\./);
    if(sub_addr.length != 4) return false;
    if (addr.lastIndexOf(".") == (addr.length-1))
		return false;

	if(isNValidIP(sub_addr[0]) == true) return false;
	if(isNValidIP(sub_addr[1]) == true) return false;
	if(isNValidIP(sub_addr[2]) == true) return false;
	if(isNValidIP(sub_addr[3]) == true) return false;

    return true;
}

// DUPLICATE FUNCTION:
function isValidIP (addr)
{
    var sub_addr;
    var net_id;
    var host_id;

	data = addr.match(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/);
	if (!data || !addr) return false;

    if (addr.search(/^\d{1,3}\.\d{1,3}\.\d{1,3}\./) == -1)
        return false;
    sub_addr = addr.split(/\./);
    if(sub_addr.length != 4) return false;
    if (addr.lastIndexOf(".") == (addr.length-1))
		return false;

   	if(isNValidIP(sub_addr[0]) == true) return false;
   	if(isNValidIP(sub_addr[1]) == true) return false;
  	if(isNValidIP(sub_addr[2]) == true) return false;
   	if(isNValidIP(sub_addr[3]) == true) return false;

    if (sub_addr[0] > 0xff || sub_addr[1] > 0xff || sub_addr[2] > 0xff || sub_addr[3] > 0xff)
        return false;

    if(sub_addr[0] < 128) /* A class */
    {
        if(sub_addr[0] == 0 || sub_addr[0] == 127)
            return false;
        host_id = sub_addr[1] * 0x10000 + sub_addr[2] * 0x100 + sub_addr[3] * 0x1;
        if(host_id == 0 || host_id == 0xffffff)
            return false;
    }
    else if(sub_addr[0] < 192) /* B class */
    {
        host_id = sub_addr[2] * 0x100 + sub_addr[3] * 0x1;
        if(host_id == 0 || host_id == 0xffff)
            return false;
    }
    else if(sub_addr[0] < 224) /* C class */
    {
        host_id = sub_addr[3] * 0x1;
        if(host_id == 0 || host_id == 0xff)
            return false;
    }
    else  /* Limit broadcast, Multicast net */
    {
        return false;
    }

    return true;
}

////////// routine.js
//function isValidIP (addr)
//{
//    var sub_addr;
//    var net_id;
//    var host_id;
//
//    if (addr.search(/^\d{1,3}\.\d{1,3}\.\d{1,3}\./) == -1)
//        return false;
//    sub_addr = addr.split(/\./);
//    if(sub_addr.length < 4) return false;
//    if(sub_addr[3] == "*")
//    	sub_addr[3] = "1";
//    else
//    {
//    	if(isNaN(sub_addr[3]) == true) return false;
//    }
//
//    if (sub_addr[0] > 0xff || sub_addr[1] > 0xff || sub_addr[2] > 0xff || sub_addr[3] > 0xff)
//        return false;
//
//    if(sub_addr[0] < 128) /* A class */
//    {
//        if(sub_addr[0] == 0 || sub_addr[0] == 127)
//            return false;
//        host_id = sub_addr[1] * 0x10000 + sub_addr[2] * 0x100 + sub_addr[3] * 0x1;
//        if(host_id == 0 || host_id == 0xffffff)
//            return false;
//    }
//    else if(sub_addr[0] < 192) /* B class */
//    {
//        host_id = sub_addr[2] * 0x100 + sub_addr[3] * 0x1;
//        if(host_id == 0 || host_id == 0xffff)
//            return false;
//    }
//    else if(sub_addr[0] < 224) /* C class */
//    {
//        host_id = sub_addr[3] * 0x1;
//        if(host_id == 0 || host_id == 0xff)
//            return false;
//    }
//    else  /* Limit broadcast, Multicast net */
//    {
//        return false;
//    }
//
//    return true;
//}


// allow 0.0.0.0
function isValid_Zero_IP (addr)
{
    var sub_addr;
    var net_id;
    var host_id;
	data = addr.match(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/);
	if (!data || !addr) return false;

    if (addr.search(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/) == -1)
        return false;
    sub_addr = addr.split(/\./);
    if(sub_addr.length != 4) return false;
    if (addr.lastIndexOf(".") == (addr.length-1))
			return false;

   	if(isNValidIP(sub_addr[0]) == true) return false;
   	if(isNValidIP(sub_addr[1]) == true) return false;
   	if(isNValidIP(sub_addr[2]) == true) return false;
   	if(isNValidIP(sub_addr[3]) == true) return false;

    if (sub_addr[0] > 0xff || sub_addr[1] > 0xff || sub_addr[2] > 0xff || sub_addr[3] > 0xff)
        return false;
	if(sub_addr[0] == 0 && sub_addr[1] == 0 && sub_addr[2] == 0 && sub_addr[3] == 0)
		return true;

    if(sub_addr[0] < 128) /* A class */
    {
        if(sub_addr[0] == 0 || sub_addr[0] == 127)
            return false;
        host_id = sub_addr[1] * 0x10000 + sub_addr[2] * 0x100 + sub_addr[3] * 0x1;
        if(host_id == 0xffffff)
            return false;
    }
    else if(sub_addr[0] < 192) /* B class */
    {
        host_id = sub_addr[2] * 0x100 + sub_addr[3] * 0x1;
        if(host_id == 0xffff)
            return false;
    }
    else if(sub_addr[0] < 224) /* C class */
    {
        host_id = sub_addr[3] * 0x1;
        if(host_id == 0xff)
            return false;
    }
    else  /* Limit broadcast, Multicast net */
    {
        return false;
    }

    return true;
}

////////// routine.js
// allow 0.0.0.0
//function isValid_Zero_IP (addr)
//{
//    var sub_addr;
//    var net_id;
//    var host_id;
//    if (addr.search(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/) == -1)
//        return false;
//    sub_addr = addr.split(/\./);
//    if (sub_addr[0] > 0xff || sub_addr[1] > 0xff || sub_addr[2] > 0xff || sub_addr[3] > 0xff)
//        return false;
//	if(sub_addr[0] == 0 && sub_addr[1] == 0 && sub_addr[2] == 0 && sub_addr[3] == 0)
//		return true;
//
//    if(sub_addr[0] < 128) /* A class */
//    {
//        if(sub_addr[0] == 0 || sub_addr[0] == 127)
//            return false;
//        host_id = sub_addr[1] * 0x10000 + sub_addr[2] * 0x100 + sub_addr[3] * 0x1;
//        if(host_id == 0 || host_id == 0xffffff)
//            return false;
//    }
//    else if(sub_addr[0] < 192) /* B class */
//    {
//        host_id = sub_addr[2] * 0x100 + sub_addr[3] * 0x1;
//        if(host_id == 0 || host_id == 0xffff)
//            return false;
//    }
//    else if(sub_addr[0] < 224) /* C class */
//    {
//        host_id = sub_addr[3] * 0x1;
//        if(host_id == 0 || host_id == 0xff)
//            return false;
//    }
//    else  /* Limit broadcast, Multicast net */
//    {
//        return false;
//    }
//
//    return true;
//}

// END_DUPLICATE FUNCTION

// parse port range string
function parseValueRange(value)
{
	var sub_value, range, sub_range;
	var i;
	var value1, value2;
    var dash;

	// check '*'
	if (value == null || value.length == 0) return null;
	if (value.length == 1) {
		if (value == '*') {
			range = new Array(1);
			range[0] = new PORT_RANGE();
			range[0].b_port = 1;
			range[0].e_port = 65535;
			return range;
		}
	}

	sub_value = value.split(/\,/);
	range = new Array(sub_value.length);
	for(i=0; i < sub_value.length; i++)
	{
		range[i] = new PORT_RANGE();
        dash = sub_value[i].indexOf("-");
		sub_range = sub_value[i].split(/\-/);
		if(sub_range.length == 1)
		{
            if(dash != -1) return null;
			if(isNaN(sub_range[0]) == true) return null;
			value1 = new Number(sub_range[0]);
			range[i].b_port = range[i].e_port = value1;
		}
		else if(sub_range.length == 2)
		{
			if(isNaN(sub_range[0]) == false && sub_range[1] == '*')
			{
				value1 = new Number(sub_range[0]);
				range[i].b_port = value1;
				range[i].e_port = 65535;
			}
			else
			{
				if(isNaN(sub_range[0]) == true || isNaN(sub_range[1]) == true) return null;
				value1 = new Number(sub_range[0]);
				value2 = new Number(sub_range[1]);
				if(value1.valueOf() > value2.valueOf())
				{
					range[i].b_port = value2;
					range[i].e_port = value1;
				}
				else
				{
					range[i].b_port = value1;
					range[i].e_port = value2;
				}
			}
		}
		else
			return null;
	}
	return range;
}

function parseIPValueRange(value)
{
	var sub_value, range, sub_range;
	var i;
	var value1, value2;
	var sub_addr;

	// check '*'
	if(value == null || value.length == 0) return null;
	if(value.length == 1)
	{
		if(value == '*')
		{
			range = new Array(1);
			range[0] = new IP_RANGE();
			range[0].ip = "0.0.0.0";
			range[0].count = 1;
			return range;
		}
		return null;
	}

	sub_value = value.split(/\,/);
	range = new Array(sub_value.length);
	for(i=0; i < sub_value.length; i++)
	{
		range[i] = new IP_RANGE();
		sub_range = sub_value[i].split(/\-/);

		if(sub_range.length == 1)
		{
			if(isValidIP(sub_range[0]) == false) return null;
    		sub_addr = sub_range[0].split(/\./);
    		if(sub_addr[3] == "*")
    		{
    			sub_addr[3] = "1";
				range[i].ip = sub_addr[0] + "." + sub_addr[1] + "." + sub_addr[2] + "." + sub_addr[3];
				range[i].ip = parseIP(range[i].ip);
				range[i].count = 254;
    		}
    		else
    		{
				range[i].ip = sub_addr[0] + "." + sub_addr[1] + "." + sub_addr[2] + "." + sub_addr[3];
				range[i].ip = parseIP(range[i].ip);
				range[i].count = 1;
    		}
		}
		else if(sub_range.length == 2)
		{
			if(isValidIP(sub_range[0]) == false || isNaN(sub_range[1]) == true ) return null;
    		sub_addr = sub_range[0].split(/\./);
			value1 = new Number(sub_addr[3]);
			value2 = new Number(sub_range[1]);
			if(value1.valueOf() > value2.valueOf())
			{
				range[i].ip = sub_addr[0] + "." + sub_addr[1] + "." + sub_addr[2] + "." + value2.valueOf();
				range[i].count = value1.valueOf() - value2.valueOf() + 1;
			}
			else
			{
				range[i].ip = sub_addr[0] + "." + sub_addr[1] + "." + sub_addr[2] + "." + value1.valueOf();
				range[i].count = value2.valueOf() - value1.valueOf() + 1;
			}
		}
		else
			return null;
	}
	return range;
}

function trueValueToInt(inValue) {

	if (inValue)
		return 1;
	else
		return 0;
}

function intValueToBool(inValue) {

	//alert("inValue:" + inValue);
	if (inValue == 0)
		return false;
	else
		return true;
}



function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

function MM_jumpMenu(targ,selObj,restore){ //v3.0
  eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");
  if (restore) selObj.selectedIndex=0;
}

function clear1() {
	window.status="";
}

var buttontype="'font-size:8pt;font-family: Arial;font-weight:bold;BACKGROUND:#FFFFFF;border-style: outset;border-width:thin;border-color:#FFFFFF;color:#0000FF' onmouseover=\"this.style.backgroundColor='#A6A8BD'\" onmouseout=\"this.style.backgroundColor='#C6C6D6'\"";

function isInvalidLPRName(s, name)
{
	var src = new String(s);
	var lst = new String(" '/:*?\"<>|`=+\\[];,~!@#$%^&()");
	var i, n;

	n = lst.length;
	for (i=0; i<n; i++) {
		var c = lst.charAt(i);
		var tmpS = new String(c);
		if (src.indexOf(tmpS) != -1) {
			alert(errSpecialChar1 + ' \' : * ? \\ \" < > | ` = + \/ [ ] ; , ~ ! @ # $ % ^ ( ) ' + errSpecialChar5 + ' &' + errSpecialChar3 + name + errSpecialChar4);
			return true;
		}
	}

	return false;
}

function isInvalidInput(s, name)
{
	var src = new String(s);
	var lst = new String(" /:*?\"<>|`=+\\[];,'#@!$%^&*()-_");
	var i, n;

	n = lst.length;
	for (i=0; i<n; i++) {
		var c = lst.charAt(i);
		var tmpS = new String(c);
		if (src.indexOf(tmpS) != -1) {
			alert(errSpecialChar1 + ' : * ? \\ \" < > | ` = + \/ [ ] ; , ' + errSpecialChar5 + ' \' # @ ! $ % ^ & * ( ) - _' + errSpecialChar3 + name + errSpecialChar4);
			return true;
		}
	}

	return false;
}

function isInvalidDomain(s, name)
{
	var src = new String(s);
	var lst = new String(" /:*?\"<>|`=+\\[];,'");
	var i, n;

	//check invalid "." or ".." or "..."
	i = src.indexOf(new String("."));
	if(i > -1) {
//		alert("Invalid " + name + ".");
		alert(errInvalid + name + ".");
		return true;
	}

	n = lst.length;
	for (i=0; i<n; i++) {
		var c = lst.charAt(i);
		var tmpS = new String(c);
		if (src.indexOf(tmpS) != -1) {
			alert(errSpecialChar1 + ' : * ? \\ \" < > | ` = + \/ [ ] ; , ' + errSpecialChar5 + ' \'' + errSpecialChar3 + name + errSpecialChar4);
			return true;
		}
	}

	return false;
}
function isInvalidPath(s, name) {
	var src = new String(s);
	var lst = new String("/:*?\"<>|");
	var i, n, c, tmpS;

	// check special char
	n = lst.length;
	for (i=0; i<n; i++) {
		c = lst.charAt(i);
		tmpS = new String(c);
		if (src.indexOf(tmpS) != -1) {
			alert(errSpecialChar2 + ' : * ? \" < > ' + errSpecialChar5 + ' |' + errSpecialChar3 + name + errSpecialChar4);
			return true;
		}
	}

	// check invalid special case ".\", "\."
	c = new String(".");
	tmpS = new String("\\");
	i = src.indexOf(c);
	n = src.indexOf(tmpS);
	//if ((i != -1) && (n != -1)) {
	if ( (i > -1) || ((i != -1) && (n != -1))) {
		if (((i + 1) == n) || ((i - 1) == n)) {
			alert(errPath);
			return true;
		}
	}

	return false;
}

function getQueryValue( name )
{
	var query = location.search ;
	if (query=="") return "" ;
	query = query.substr( 1, query.length ) ; // ignore the first char: '?'
	var arr = query.split( /\&/ );
	name = name+"=" ;
	var index;
	for( var x = 0 ; x < arr.length ; x++ ){
		index = arr[x].indexOf(name) ;
		if( index != 0 )  continue ; // must match at the first character
		return arr[x].substr( name.length, arr[x].length ) ;
	}
	return "" ;
}

function getIntQueryValue( name, default_val )
{
	var r ;
	var q = getQueryValue( name ) ;
	if( q=='' )  r = default_val ;
	else		 r = parseInt(q) ;

	return r ;
}

function PortRangeOverlap( port1, port2 )
{
	// check arr2.b_port
	if( port1.b_port <= port2.b_port && port2.b_port <= port1.e_port )
		return true ;
	// check arr2.e_port
	if( port1.b_port <= port2.e_port && port2.e_port <= port1.e_port )
		return true ;
	// check arr1.b_port
	if( port2.b_port <= port1.b_port && port1.b_port <= port2.e_port )
		return true ;
	// check arr1.e_port
	if( port2.b_port <= port1.e_port && port1.e_port <= port2.e_port )
		return true ;
	return false ;
}

function containDuplicatePort( port_arr1, port_arr2 )
{
	var x, y ;

	if( port_arr1==null || port_arr2==null ) return -1 ;
	for( x = 0 ; x < port_arr1.length ; x++ ){
		if( port_arr1[x].b_port==0 || port_arr1[x].e_port==0 ) continue ;

		for( y = 0 ; y < port_arr2.length ; y++ ){
			if( port_arr2[y].b_port==0 || port_arr2[y].e_port==0 ) continue ;

			if( PortRangeOverlap( port_arr1[x], port_arr2[y] ) )
				return true ;
		}
	}

	return false ;
}

function protocolIsSame( protocol1, protocol2 )
{
	if( protocol1==both_proto || protocol2==both_proto )  return 1 ; // TCP&UDP <-> TCP or UDP
	if( protocol1==protocol2 )  return 1 ; // TCP<->TCP, UDP<->UDP
	return 0 ;
}

function showInfoByStyleID (idName, f)
{
	var F = document.tF;
	var styleDisplay;
	var jIdName = document.getElementById (idName);

	if (f == true)  {
		styleDisplay = (navigator.appName == "Netscape" || navigator.appName == "Opera")  ? "table-row": "block";
	}  else  {
		styleDisplay = "none";
	}
	jIdName.style.display = styleDisplay;
}

function checkNumberRange(f, s, e, bFocus)
{
	if (f != null)  {
		if (isNaN(f.value) == false)  {
			if (f.value >= s && f.value <= e)  {
				return true;
			}
		}
	}
	if (bFocus == true)  {
		f.focus();
	}
	return false;
}
var url_address=document.URL;

function cancel_button()
{
	window.location.href=url_address;
}

var browserDetectBrowser = navigator.appName;
//alert ('browserDetectBrowser: ' + browserDetectBrowser);
var buttonb = ((browserDetectBrowser != 'Netscape') ? 'button87b_e' : 'button87b_n');
var buttonb1 = ((browserDetectBrowser != 'Netscape') ? 'button87b1_e' : 'button87b1_n');
var c_border = ((browserDetectBrowser != 'Netscape') ? 'c_border' : 'c_border_n');
var t_Frame = ((browserDetectBrowser != 'Netscape') ? 't_Frame_e' : 't_Frame_n');
var t_Frame2 = ((browserDetectBrowser != 'Netscape') ? 't_Frame_eL' : 't_Frame_nL');
var t_Frame3 = ((browserDetectBrowser != 'Netscape') ? 't_Frame_eLL' : 't_Frame_nLL');

var url_address=document.URL;
//alert ("url_address: " + url_address);
function lang_ES()
{
    document.tFF.language_flag.value=0;
//    document.tFF.menupage.value=menupage;
	if (url_address.indexOf("auto_upg2.stm",0)!= -1)
		document.tFF.menupage.value="/auto_upg2.stm";
	else if (url_address.indexOf("pin_code.stm",0)!= -1)
		document.tFF.menupage.value="/pin_code.stm";
	else if (url_address.indexOf("redir.stm",0)!= -1)
		document.tFF.menupage.value="/redir.stm"+location.search ;
	else if (url_address.indexOf("redir_.stm",0)!= -1)
		document.tFF.menupage.value="/redir_.stm"+location.search ;
	else
		document.tFF.menupage.value="/index.stm";
    document.tFF.submit();
}

function lang_EN()
{
    document.tFF.language_flag.value=1;
	if (url_address.indexOf("auto_upg2.stm",0)!= -1)
	{
//		alert ("url_address: " + url_address);
		document.tFF.menupage.value="/auto_upg2.stm";
	}
	else if (url_address.indexOf("pin_code.stm",0)!= -1)
		document.tFF.menupage.value="/pin_code.stm";
	else if (url_address.indexOf("redir.stm",0)!= -1)
		document.tFF.menupage.value="/redir.stm"+location.search ;
	else if (url_address.indexOf("redir_.stm",0)!= -1)
		document.tFF.menupage.value="/redir_.stm"+location.search ;
	else
	{
//		alert ("url_address: " + url_address);
		document.tFF.menupage.value="/index.stm";
    }
    document.tFF.submit();
}

var user_Agent = navigator.userAgent.toLowerCase();
var app_Name = navigator.appName.toLowerCase();
var app_version = navigator.appVersion.toLowerCase();
var browser_ver="";
var browser_ver_name;
var NAV_B;
var NAV_B1;

function detectbrowser()
{
	if (app_Name.match("microsoft internet explorer") !=null)
	{
		browser_ver="IE";
		for(i=0;i<20;i++)
		{
			if(app_version.match("msie "+i)!=null)
			{
				browser_ver_name=i;
				break;
			}
		}
		browser_ver_name=parseInt(browser_ver_name);
	}
	else
	{
		if (user_Agent.match("navigator") !=null)
			browser_ver="NAV";
		else if (user_Agent.match("opera") !=null)
			browser_ver="OPE";
		else if (user_Agent.match("safari") !=null)
			browser_ver="SAF";
		else if ((user_Agent.match("firefox") !=null)&&(user_Agent.match("mozilla") !=null))
			browser_ver="FIR";
		else if (user_Agent.match("mozilla") !=null)
			browser_ver="MOZ";
		else if (user_Agent.match("netscape") !=null)
			browser_ver="NET";
		else
			browser_ver="NET";

		if (browser_ver=="NAV")
		{
			NAV_B=user_Agent.indexOf("navigator",0)+11;
			NAV_B1=user_Agent.indexOf("navigator",0)+10;
			browser_ver_name=user_Agent.substring(NAV_B,NAV_B1);
			browser_ver_name=parseInt(browser_ver_name);
		}
		else if (browser_ver=="OPE")
		{
			NAV_B=user_Agent.indexOf("opera",0)+7;
			NAV_B1=user_Agent.indexOf("opera",0)+6;
			browser_ver_name=user_Agent.substring(NAV_B,NAV_B1);
			browser_ver_name=parseInt(browser_ver_name);
		}
		else if (browser_ver=="MOZ")
		{
			for(i=0;i<10;i++)
			{
				for (j=0;j<10;j++)
				{
					if(user_Agent.match("rv:"+i+"."+j)!=null)
					{
						browser_ver_name=i+"."+j;
						break;
					}
				}
			}
		}
		else if (browser_ver=="SAF")
		{
			NAV_B=user_Agent.indexOf("version",0)+9;
			NAV_B1=user_Agent.indexOf("version",0)+8;
			browser_ver_name=user_Agent.substring(NAV_B,NAV_B1);
			browser_ver_name=parseInt(browser_ver_name);
		}
		else if (browser_ver=="NET")
		{
			NAV_B=user_Agent.indexOf("netscape",0)+10;
			NAV_B1=user_Agent.indexOf("netscape",0)+9;
			browser_ver_name=user_Agent.substring(NAV_B,NAV_B1);
			browser_ver_name=parseInt(browser_ver_name);
		}
		else
		{
			NAV_B=user_Agent.indexOf("firefox",0)+9;
			NAV_B1=user_Agent.indexOf("firefox",0)+8;
			browser_ver_name=user_Agent.substring(NAV_B,NAV_B1);
			browser_ver_name=parseInt(browser_ver_name);
		}
	}
}

function checkNum2(s)
{ // A-Z, a-z, 0-9
	var i, c;
	for (i=0; i<s.length; i++) {
		c = s.charCodeAt(i);
		if ( c>=48 && c<=57 ) continue;
		if ( c>=65 && c<=90 ) continue;
		if ( c>=97 && c<=122 ) continue;
		return false;
	}
	return true;
}

function spec_filename(data)
{
	if ( navigator.platform.indexOf('Win') != -1)
	{ // Win
		if (app_Name.indexOf('netscape') == -1)
		{
			if (checkNum2(data.substr(0,1))==false)
				return false;
			else
			{
				if (data.substr(1,1).indexOf(":")!= -1)
					return true;
				else
					return false;
			}
		}
		else
		{
			if((data.indexOf("\\",0)!= -1)||(data.indexOf(":",0)!= -1))
				return true;
			else
				return false;
		}
	}
	if ((navigator.platform.indexOf('UNI') != -1)|| (navigator.platform.indexOf('Lin') != -1) || (navigator.platform.indexOf('Sun') != -1) || (navigator.platform.indexOf('Mac') != -1))
	{ // UNIX,Linus,SunOS, Macintosh
		if( data.indexOf("/",0)!= -1)
			return true;
		else
			return false;
	}
}

function str_add_bracket( text )
{
	return '';

    //var prefix = "<font color=#848284>&nbsp;(" ;
    var prefix = "<font color=#a0a0a0 size=1>&nbsp;(" ;
    var posfix = ")</font>" ;
	if ( text==null || text=='' )
		text = ' ' ;
	return prefix + text + posfix ;
}

function get_option_text( field, val )
{
	var i, str = "" ;
	for( i=0; i < field.options.length ; i++ ){
		if( val==field.options[i].value ){
			str= field.options[i].text ;
			break;
		}
	}
	return str ;
}

function gen_checkbox( fieldname, enable )
{
	var text = '<input type="checkbox" name="'+fieldname+'" value=1 '+(enable?'checked':' ')+' disabled>' ;
	return text ;
}

function gen_radio( fieldname, enable )
{
	var text = '<input type="radio" name="'+fieldname+'" value=1 '+(enable?'checked':' ')+' disabled>' ;
	return text ;
}

function SERVICE_PORT_RANGE()
{
	this.service_name = "";
	this.port_range = new PORT_RANGE();
}

function IsServicePort( protocol_type, port_arr, service_port_arr, ignore_service_name_arr,
							msg_callback, field_title  )
{
	var i, j, k ;

	if( port_arr==null || service_port_arr==null ) return false ;

	for( i = 0 ; i < port_arr.length ; i++ )
	{
		if( port_arr[i].b_port==0 || port_arr[i].e_port==0 ) continue ;

		for( j = 0 ; j < service_port_arr.length ; j++ )
		{
			if( service_port_arr[j].port_range.b_port==0 || service_port_arr[j].port_range.e_port==0 )
				continue ;
			if(	!protocolIsSame(protocol_type, service_port_arr[j].port_range.protocol) )
				continue;
			if( !PortRangeOverlap( port_arr[i], service_port_arr[j].port_range ) )
				continue;
			if( ignore_service_name_arr != null ){
				for( k=0 ; k < ignore_service_name_arr.length ; k++ ){
					if( ignore_service_name_arr[k]==service_port_arr[j].service_name ) // the same service, ignore
						break;
				}
				if( k != ignore_service_name_arr.length ) // found
					continue ;
			}

			var port_s = service_port_arr[j].port_range.b_port ;
			if(service_port_arr[j].port_range.e_port!=service_port_arr[j].port_range.b_port)
				port_s += ' ~ '+ service_port_arr[j].port_range.e_port ;
			var pro_s;
			if(service_port_arr[j].port_range.protocol==tcp_proto) pro_s = 'TCP'
			else if(service_port_arr[j].port_range.protocol==udp_proto) pro_s = 'UDP'
			//else						 pro_s = 'TCP&UDP'

			if( msg_callback )
				msg_callback( field_title, pro_s, port_s ) ;
			else
				; //alert( field_title+" can't include "+pro_s+" Port "+port_s+" ! Please configure another port range." );

			return true ;
		}
	}

	return false;
}

function IsUsedByPortMapping( protocol_type, port_arr, virtual_server )
{
	var i;

	if( port_arr==null || virtual_server==null )
		return false ;

	for( i=0 ; i < virtual_server.entry.length ; i++ ){
		if ( virtual_server.entry[i].enable==0 ) continue ;
		if (!protocolIsSame(protocol_type, virtual_server.entry[i].protocol)) continue ;

   		if( containDuplicatePort( port_arr, virtual_server.entry[i].port ) )
   			return true ;
	}

	return false ;
}

function toggleField( frm, fieldname, enable, number )
{
	var i;

	for(i=0; i<frm.length; i++) {
		if(frm.elements[i].name != fieldname) continue;

		frm.elements[i].disabled = !enable ;

		number--;
		if(number<=0) break;
	}

	//var obj = document.getElementById(fieldname) ;
	//if(obj) obj.style.color="gray";
}

function elementDisplay( id, visible, element_type )
{   // element_type=0: tr
	var f;

	f = document.getElementById(id);
	if( f==null ) return;

	if( visible ){
		f.style.visibility = 'visible';
		var display='block';
		if( element_type==0 ){
			if ((navigator.appName == 'Netscape') || (navigator.appName == 'Opera'))
				display = 'table-row';
		}
		f.style.display = display;
	} else {
		f.style.visibility = 'hidden';
		f.style.display = 'none';
	}

}


